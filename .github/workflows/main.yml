name: 'Terraform'

on:
  push:
    branches: [ "main" ]

env:
  REGION: us-central1
  GAR_LOCATION: us-central1-docker.pkg.dev/alien-sol-412801/mage-baseball-pipelines
  GOOGLE_CLOUD_RUN_SERVICE_NAME: mage-baseball-pipelines
  IMAGE: mageai
  PROJECT_ID: alien-sol-412801
  REPOSITORY: mage-baseball-pipelines

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  build-and-deploy:
    name: Build, Publish, and Deploy
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     working-directory: ./mage-baseball-pipelines
    steps:
    - name: Checkout
      uses: actions/checkout@master
    
    - id: auth
      name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v0.6.0
      with: 
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}
    
    - name: "Set up Cloud SDK"
      uses: "google-github-actions/setup-gcloud@v1"

    - name: "Use gcloud CLI"
      run: "gcloud info"

    - name: "Docker Auth"
      run: |-
        gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev 

    - name: Build image
      run: docker build . --file ./Dockerfile --tag "${{ env.GAR_LOCATION }}/${{ env.IMAGE }}:${{ github.sha }}"
      working-directory: ./mage-baseball-pipelines

    - name: Push image
      run: docker push "${{ env.GAR_LOCATION }}/${{ env.IMAGE }}:${{ github.sha }}"
  
  terraform:
    needs: build-and-deploy
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/prod

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@master

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v0.6.0
      with:
        create_credentials_file: 'true'
        workload_identity_provider: 'projects/916297500838/locations/global/workloadIdentityPools/github-prod2/providers/github-provider-prod'
        service_account: 'github-actions-prod2@alien-sol-412801.iam.gserviceaccount.com'

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env: 
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        TF_CLI_ARGS: '-var-file="env/prod.tfvars" -backend-config=prod-backend.conf'

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      env: 
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        TF_CLI_ARGS: '-var-file="env/prod.tfvars" -var="database_password=${{ secrets.DB_PASSWORD }}" -var="docker_image=${{ env.GAR_LOCATION }}/${{ env.IMAGE }}:${{ github.sha }}"'



      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      id: apply
      run: terraform apply -auto-approve -input=false
      env: 
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        TF_CLI_ARGS: '-var-file="env/prod.tfvars" -var="database_password=${{ secrets.DB_PASSWORD }}" -var="docker_image=${{ env.GAR_LOCATION }}/${{ env.IMAGE }}:${{ github.sha }}"'
