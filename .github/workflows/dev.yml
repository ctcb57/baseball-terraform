name: 'Terraform'

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]
    types:
      - opened # default
      - synchronize # default
      - reopened # default
      - closed

permissions:
  contents: read
  id-token: write
  pull-requests: write

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@master

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v0.6.0
      with:
        create_credentials_file: 'true'
        workload_identity_provider: 'projects/916297500838/locations/global/workloadIdentityPools/github/providers/github-provider'
        service_account: 'github-actions@alien-sol-412801.iam.gserviceaccount.com'

    # - name: Terraform fmt
    #   id: fmt
    #   run: terraform fmt -check

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      env: 
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        TF_CLI_ARGS: '-var-file="env/dev.tfvars" -backend-config=dev-backend.conf'

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      env: 
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        TF_CLI_ARGS: '-var-file="env/dev.tfvars"'


    # - uses: actions/github-script@v6
    #   if: github.event.pull_request.merged != true
    #   with:
    #     github-token: ${{ secrets.GITHUB_TOKEN }}
    #     script: |
    #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
    #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
    #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
    #       <details><summary>Validation Output</summary>
    #       \`\`\`\n
    #       ${{ steps.validate.outputs.stdout }}
    #       \`\`\`
    #       </details>
    #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
    #       <details><summary>Show Plan</summary>
    #       \`\`\`\n
    #       ${{ steps.plan.outputs.stdout }}
    #       \`\`\`
    #       </details>
    #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
    #       github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      id: apply
      if: github.event.pull_request.merged == true
      run: terraform apply -auto-approve -input=false
      env: 
        GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        TF_CLI_ARGS: '-var-file="env/dev.tfvars"'

    # - uses: actions/github-script@v6
    #   if: github.event.pull_request.merged == true
    #   with:
    #     script: |
    #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
    #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
    #       #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
    #       #### Terraform Apply üìñ\`${{ steps.apply.outcome }}\`
    #       <details><summary>Show Apply</summary>
    #       \`\`\`\n
    #       ${{ steps.apply.outputs.stdout }}
    #       \`\`\`
    #       </details>
    #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
    #       github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #       })
